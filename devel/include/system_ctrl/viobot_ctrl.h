// Generated by gencpp from file system_ctrl/viobot_ctrl.msg
// DO NOT EDIT!


#ifndef SYSTEM_CTRL_MESSAGE_VIOBOT_CTRL_H
#define SYSTEM_CTRL_MESSAGE_VIOBOT_CTRL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace system_ctrl
{
template <class ContainerAllocator>
struct viobot_ctrl_
{
  typedef viobot_ctrl_<ContainerAllocator> Type;

  viobot_ctrl_()
    : header()
    , image_select(0)
    , imu_raw(false)
    , tof_enable(false)
    , tof_depth(false)
    , tof_amp(false)
    , light(false)  {
    }
  viobot_ctrl_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , image_select(0)
    , imu_raw(false)
    , tof_enable(false)
    , tof_depth(false)
    , tof_amp(false)
    , light(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _image_select_type;
  _image_select_type image_select;

   typedef uint8_t _imu_raw_type;
  _imu_raw_type imu_raw;

   typedef uint8_t _tof_enable_type;
  _tof_enable_type tof_enable;

   typedef uint8_t _tof_depth_type;
  _tof_depth_type tof_depth;

   typedef uint8_t _tof_amp_type;
  _tof_amp_type tof_amp;

   typedef uint8_t _light_type;
  _light_type light;





  typedef boost::shared_ptr< ::system_ctrl::viobot_ctrl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::system_ctrl::viobot_ctrl_<ContainerAllocator> const> ConstPtr;

}; // struct viobot_ctrl_

typedef ::system_ctrl::viobot_ctrl_<std::allocator<void> > viobot_ctrl;

typedef boost::shared_ptr< ::system_ctrl::viobot_ctrl > viobot_ctrlPtr;
typedef boost::shared_ptr< ::system_ctrl::viobot_ctrl const> viobot_ctrlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::system_ctrl::viobot_ctrl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::system_ctrl::viobot_ctrl_<ContainerAllocator1> & lhs, const ::system_ctrl::viobot_ctrl_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.image_select == rhs.image_select &&
    lhs.imu_raw == rhs.imu_raw &&
    lhs.tof_enable == rhs.tof_enable &&
    lhs.tof_depth == rhs.tof_depth &&
    lhs.tof_amp == rhs.tof_amp &&
    lhs.light == rhs.light;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::system_ctrl::viobot_ctrl_<ContainerAllocator1> & lhs, const ::system_ctrl::viobot_ctrl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace system_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::system_ctrl::viobot_ctrl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::system_ctrl::viobot_ctrl_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::system_ctrl::viobot_ctrl_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "169118a6b7255df21a4b81f2f4a87a03";
  }

  static const char* value(const ::system_ctrl::viobot_ctrl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x169118a6b7255df2ULL;
  static const uint64_t static_value2 = 0x1a4b81f2f4a87a03ULL;
};

template<class ContainerAllocator>
struct DataType< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "system_ctrl/viobot_ctrl";
  }

  static const char* value(const ::system_ctrl::viobot_ctrl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32 image_select\n"
"bool imu_raw\n"
"bool tof_enable\n"
"bool tof_depth\n"
"bool tof_amp\n"
"bool light\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::system_ctrl::viobot_ctrl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.image_select);
      stream.next(m.imu_raw);
      stream.next(m.tof_enable);
      stream.next(m.tof_depth);
      stream.next(m.tof_amp);
      stream.next(m.light);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct viobot_ctrl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::system_ctrl::viobot_ctrl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::system_ctrl::viobot_ctrl_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image_select: ";
    Printer<int32_t>::stream(s, indent + "  ", v.image_select);
    s << indent << "imu_raw: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.imu_raw);
    s << indent << "tof_enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_enable);
    s << indent << "tof_depth: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_depth);
    s << indent << "tof_amp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tof_amp);
    s << indent << "light: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.light);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SYSTEM_CTRL_MESSAGE_VIOBOT_CTRL_H
