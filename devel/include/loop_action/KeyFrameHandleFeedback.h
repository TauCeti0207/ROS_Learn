// Generated by gencpp from file loop_action/KeyFrameHandleFeedback.msg
// DO NOT EDIT!


#ifndef LOOP_ACTION_MESSAGE_KEYFRAMEHANDLEFEEDBACK_H
#define LOOP_ACTION_MESSAGE_KEYFRAMEHANDLEFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace loop_action
{
template <class ContainerAllocator>
struct KeyFrameHandleFeedback_
{
  typedef KeyFrameHandleFeedback_<ContainerAllocator> Type;

  KeyFrameHandleFeedback_()
    : saving(0)  {
    }
  KeyFrameHandleFeedback_(const ContainerAllocator& _alloc)
    : saving(0)  {
  (void)_alloc;
    }



   typedef uint32_t _saving_type;
  _saving_type saving;





  typedef boost::shared_ptr< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct KeyFrameHandleFeedback_

typedef ::loop_action::KeyFrameHandleFeedback_<std::allocator<void> > KeyFrameHandleFeedback;

typedef boost::shared_ptr< ::loop_action::KeyFrameHandleFeedback > KeyFrameHandleFeedbackPtr;
typedef boost::shared_ptr< ::loop_action::KeyFrameHandleFeedback const> KeyFrameHandleFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator1> & lhs, const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.saving == rhs.saving;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator1> & lhs, const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace loop_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "462113d864566488f4e0ca18af3ef254";
  }

  static const char* value(const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x462113d864566488ULL;
  static const uint64_t static_value2 = 0xf4e0ca18af3ef254ULL;
};

template<class ContainerAllocator>
struct DataType< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "loop_action/KeyFrameHandleFeedback";
  }

  static const char* value(const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define a feedback message \n"
"uint32 saving\n"
;
  }

  static const char* value(const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.saving);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyFrameHandleFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::loop_action::KeyFrameHandleFeedback_<ContainerAllocator>& v)
  {
    s << indent << "saving: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.saving);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOOP_ACTION_MESSAGE_KEYFRAMEHANDLEFEEDBACK_H
