// Generated by gencpp from file loop_action/KeyFrameHandleResult.msg
// DO NOT EDIT!


#ifndef LOOP_ACTION_MESSAGE_KEYFRAMEHANDLERESULT_H
#define LOOP_ACTION_MESSAGE_KEYFRAMEHANDLERESULT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace loop_action
{
template <class ContainerAllocator>
struct KeyFrameHandleResult_
{
  typedef KeyFrameHandleResult_<ContainerAllocator> Type;

  KeyFrameHandleResult_()
    : keyframe_num(0)  {
    }
  KeyFrameHandleResult_(const ContainerAllocator& _alloc)
    : keyframe_num(0)  {
  (void)_alloc;
    }



   typedef uint32_t _keyframe_num_type;
  _keyframe_num_type keyframe_num;





  typedef boost::shared_ptr< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> const> ConstPtr;

}; // struct KeyFrameHandleResult_

typedef ::loop_action::KeyFrameHandleResult_<std::allocator<void> > KeyFrameHandleResult;

typedef boost::shared_ptr< ::loop_action::KeyFrameHandleResult > KeyFrameHandleResultPtr;
typedef boost::shared_ptr< ::loop_action::KeyFrameHandleResult const> KeyFrameHandleResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::loop_action::KeyFrameHandleResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::loop_action::KeyFrameHandleResult_<ContainerAllocator1> & lhs, const ::loop_action::KeyFrameHandleResult_<ContainerAllocator2> & rhs)
{
  return lhs.keyframe_num == rhs.keyframe_num;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::loop_action::KeyFrameHandleResult_<ContainerAllocator1> & lhs, const ::loop_action::KeyFrameHandleResult_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace loop_action

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "89b35da2e44418098ba2504142cdc556";
  }

  static const char* value(const ::loop_action::KeyFrameHandleResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x89b35da2e4441809ULL;
  static const uint64_t static_value2 = 0x8ba2504142cdc556ULL;
};

template<class ContainerAllocator>
struct DataType< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "loop_action/KeyFrameHandleResult";
  }

  static const char* value(const ::loop_action::KeyFrameHandleResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the result\n"
"uint32 keyframe_num\n"
;
  }

  static const char* value(const ::loop_action::KeyFrameHandleResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.keyframe_num);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct KeyFrameHandleResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::loop_action::KeyFrameHandleResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::loop_action::KeyFrameHandleResult_<ContainerAllocator>& v)
  {
    s << indent << "keyframe_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.keyframe_num);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOOP_ACTION_MESSAGE_KEYFRAMEHANDLERESULT_H
